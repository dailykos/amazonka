{-# LANGUAGE DeriveDataTypeable #-}
{-# LANGUAGE DeriveGeneric      #-}
{-# LANGUAGE OverloadedStrings  #-}
{-# LANGUAGE RecordWildCards    #-}
{-# LANGUAGE TypeFamilies       #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-binds   #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- Derived from AWS service descriptions, licensed under Apache 2.0.

-- |
-- Module      : Network.AWS.AlexaBusiness.RegisterAVSDevice
-- Copyright   : (c) 2013-2018 Brendan Hay
-- License     : Mozilla Public License, v. 2.0.
-- Maintainer  : Brendan Hay <brendan.g.hay+amazonka@gmail.com>
-- Stability   : auto-generated
-- Portability : non-portable (GHC extensions)
--
-- Registers an Alexa-enabled device built by an Original Equipment Manufacturer (OEM) using Alexa Voice Service (AVS).
--
--
module Network.AWS.AlexaBusiness.RegisterAVSDevice
    (
    -- * Creating a Request
      registerAVSDevice
    , RegisterAVSDevice
    -- * Request Lenses
    , ravsdClientId
    , ravsdUserCode
    , ravsdProductId
    , ravsdDeviceSerialNumber
    , ravsdAmazonId

    -- * Destructuring the Response
    , registerAVSDeviceResponse
    , RegisterAVSDeviceResponse
    -- * Response Lenses
    , ravsdrsDeviceARN
    , ravsdrsResponseStatus
    ) where

import Network.AWS.AlexaBusiness.Types
import Network.AWS.AlexaBusiness.Types.Product
import Network.AWS.Lens
import Network.AWS.Prelude
import Network.AWS.Request
import Network.AWS.Response

-- | /See:/ 'registerAVSDevice' smart constructor.
data RegisterAVSDevice = RegisterAVSDevice'
  { _ravsdClientId :: !Text
  , _ravsdUserCode :: !Text
  , _ravsdProductId :: !Text
  , _ravsdDeviceSerialNumber :: !Text
  , _ravsdAmazonId :: !Text
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'RegisterAVSDevice' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ravsdClientId' - The client ID of the OEM used for code-based linking authorization on an AVS device.
--
-- * 'ravsdUserCode' - The code that is obtained after your AVS device has made a POST request to LWA as a part of the Device Authorization Request component of the OAuth code-based linking specification.
--
-- * 'ravsdProductId' - The product ID used to identify your AVS device during authorization.
--
-- * 'ravsdDeviceSerialNumber' - The key generated by the OEM that uniquely identifies a specified instance of your AVS device.
--
-- * 'ravsdAmazonId' - The device type ID for your AVS device generated by Amazon when the OEM creates a new product on Amazon's Developer Console.
registerAVSDevice
    :: Text -- ^ 'ravsdClientId'
    -> Text -- ^ 'ravsdUserCode'
    -> Text -- ^ 'ravsdProductId'
    -> Text -- ^ 'ravsdDeviceSerialNumber'
    -> Text -- ^ 'ravsdAmazonId'
    -> RegisterAVSDevice
registerAVSDevice pClientId_ pUserCode_ pProductId_ pDeviceSerialNumber_ pAmazonId_ =
  RegisterAVSDevice'
    { _ravsdClientId = pClientId_
    , _ravsdUserCode = pUserCode_
    , _ravsdProductId = pProductId_
    , _ravsdDeviceSerialNumber = pDeviceSerialNumber_
    , _ravsdAmazonId = pAmazonId_
    }


-- | The client ID of the OEM used for code-based linking authorization on an AVS device.
ravsdClientId :: Lens' RegisterAVSDevice Text
ravsdClientId = lens _ravsdClientId (\ s a -> s{_ravsdClientId = a})

-- | The code that is obtained after your AVS device has made a POST request to LWA as a part of the Device Authorization Request component of the OAuth code-based linking specification.
ravsdUserCode :: Lens' RegisterAVSDevice Text
ravsdUserCode = lens _ravsdUserCode (\ s a -> s{_ravsdUserCode = a})

-- | The product ID used to identify your AVS device during authorization.
ravsdProductId :: Lens' RegisterAVSDevice Text
ravsdProductId = lens _ravsdProductId (\ s a -> s{_ravsdProductId = a})

-- | The key generated by the OEM that uniquely identifies a specified instance of your AVS device.
ravsdDeviceSerialNumber :: Lens' RegisterAVSDevice Text
ravsdDeviceSerialNumber = lens _ravsdDeviceSerialNumber (\ s a -> s{_ravsdDeviceSerialNumber = a})

-- | The device type ID for your AVS device generated by Amazon when the OEM creates a new product on Amazon's Developer Console.
ravsdAmazonId :: Lens' RegisterAVSDevice Text
ravsdAmazonId = lens _ravsdAmazonId (\ s a -> s{_ravsdAmazonId = a})

instance AWSRequest RegisterAVSDevice where
        type Rs RegisterAVSDevice = RegisterAVSDeviceResponse
        request = postJSON alexaBusiness
        response
          = receiveJSON
              (\ s h x ->
                 RegisterAVSDeviceResponse' <$>
                   (x .?> "DeviceArn") <*> (pure (fromEnum s)))

instance Hashable RegisterAVSDevice where

instance NFData RegisterAVSDevice where

instance ToHeaders RegisterAVSDevice where
        toHeaders
          = const
              (mconcat
                 ["X-Amz-Target" =#
                    ("AlexaForBusiness.RegisterAVSDevice" :: ByteString),
                  "Content-Type" =#
                    ("application/x-amz-json-1.1" :: ByteString)])

instance ToJSON RegisterAVSDevice where
        toJSON RegisterAVSDevice'{..}
          = object
              (catMaybes
                 [Just ("ClientId" .= _ravsdClientId),
                  Just ("UserCode" .= _ravsdUserCode),
                  Just ("ProductId" .= _ravsdProductId),
                  Just
                    ("DeviceSerialNumber" .= _ravsdDeviceSerialNumber),
                  Just ("AmazonId" .= _ravsdAmazonId)])

instance ToPath RegisterAVSDevice where
        toPath = const "/"

instance ToQuery RegisterAVSDevice where
        toQuery = const mempty

-- | /See:/ 'registerAVSDeviceResponse' smart constructor.
data RegisterAVSDeviceResponse = RegisterAVSDeviceResponse'
  { _ravsdrsDeviceARN :: !(Maybe Text)
  , _ravsdrsResponseStatus :: !Int
  } deriving (Eq, Read, Show, Data, Typeable, Generic)


-- | Creates a value of 'RegisterAVSDeviceResponse' with the minimum fields required to make a request.
--
-- Use one of the following lenses to modify other fields as desired:
--
-- * 'ravsdrsDeviceARN' - The ARN of the device.
--
-- * 'ravsdrsResponseStatus' - -- | The response status code.
registerAVSDeviceResponse
    :: Int -- ^ 'ravsdrsResponseStatus'
    -> RegisterAVSDeviceResponse
registerAVSDeviceResponse pResponseStatus_ =
  RegisterAVSDeviceResponse'
    {_ravsdrsDeviceARN = Nothing, _ravsdrsResponseStatus = pResponseStatus_}


-- | The ARN of the device.
ravsdrsDeviceARN :: Lens' RegisterAVSDeviceResponse (Maybe Text)
ravsdrsDeviceARN = lens _ravsdrsDeviceARN (\ s a -> s{_ravsdrsDeviceARN = a})

-- | -- | The response status code.
ravsdrsResponseStatus :: Lens' RegisterAVSDeviceResponse Int
ravsdrsResponseStatus = lens _ravsdrsResponseStatus (\ s a -> s{_ravsdrsResponseStatus = a})

instance NFData RegisterAVSDeviceResponse where
